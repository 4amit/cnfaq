

1.The transport layer protocols used for real time multimedia, file transfer, DNS and email, respectively are:
UDP, TCP, UDP and TCP

2.Which of the following transport layer protocols is used to support electronic mail?
TCP

3.Which one of the following uses UDP as the transport protocol? 
DNS

4. Transport layer aggregates data from different applications into a single stream before passing it to
Network layer

5.Which one of the following is a transport layer protocol used in internet?
TCP and UDP

6.A _____ is a TCP name for a transport service access point. 
Port

7.Transport layer protocols deals with: 
process to process communication

8.Which one of the following is a transport layer protocol? 
stream control transmission protocol

9. What is trasnport layer?
In the Open Systems Interconnection (OSI) communications model, the Transport layer ensures
the reliable arrival of messages and provides error checking mechanisms and data flow controls.
The Transport layer provides services for both "connection-mode" transmissions and for
"connectionless-mode" transmissions. For connection-mode transmissions, a transmission
may be sent or arrive in the form of packets that need to be reconstructed into a complete
message at the other end.

10.Transport layer protocols deals with?
Process to process communication.


11. Compare TCP & UDP
    TCP:
        Transmission Control Protocol
        TCP is a connection-oriented protocol.
        As a message makes its way across the internet from one computer to another. This is connection based.
        Protocol Used: HTTP, HTTPs, FTP, SMTP, Telnet
        The speed for TCP is slower than UDP.
        TCP header size is 20 bytes
    UDP:
         	User Datagram Protocol or Universal Datagram Protocol
          UDP is a connectionless protocol.
          UDP is also a protocol used in message transport or transfer. This is not connection based 
              which means that one program can send a load of packets to another and that would be the end of the relationship.
          Protocol Used: DNS, DHCP, TFTP, SNMP, RIP, VOIP.
          UDP Header size is 8 bytes.
          
12. What is the function of transport layer?  
    OSI Model, Layer 4, provides transparent transfer of data between end systems, or hosts, and is responsible for 
    end-to-end error recovery and flow control. It ensures complete data transfer.

    Transport examples include SPX, TCP, UDP.
    
13.Which protocols operate at the transport layer?
   There are five basic protocols for the Transport Layer
    Transmission Control Protocol (TCP)
    User Datagram Protocol (UDP)
    Datagram Congestion Control Protocol (DCCP)
    Stream Control Transmission Protocol (SCTP)
    Resource Reservation Protocol (RSVP)

    Transport examples include SPX, TCP, UDP
    
14. What is congestion?
    Network congestion in data networking and queueing theory is the reduced quality of service that occurs when a network node is carrying more data than it can handle. Typical effects include queueing delay, packet loss or the blocking of new connections.

15. Which layers do congestion control?
    Transport layer and network layer

16. What is Traffic Shaping?
    Traffic shaping, also known as packet shaping, Quality of Service (QoS) or bandwidth management, is the manipulation and prioritization of network traffic to reduce the impact of heavy users or machines from effecting other users.

17. What is Socket-style API for windows called?
    winsock

18. User datagram protocol is called connectionless because?
    All UDP packets are treated independently by transport layer

19. An endpoint of an inter-process communication flow across a computer network is called
    Socket

20. Socket-style API for windows is called
    Winsock

21.  Which protocol does DHCP use at the Transport layer?
    a. 	IP
    b. 	TCP
    c. 	UDP
    d. 	ARP
Ans. c.

22.  Two types of Connection Control?
Ans.Connectionless Transport Layer : Each segment is considered as an independent packet and delivered to 
    the transport layer at the destination machine.
    Connection Oriented Transport Layer : Before delivering packets, connection is made with transport
    layer at the destination machine.
    
23. What is DNS in application layer?

Domain Name System (DNS) is one of the industry-standard suite of protocols that comprise TCP/IP. Microsoft Windows Server 2003. DNS is implemented using two software components: the DNS server and the DNS client (or resolver). Both components are run as background service applications.

Network resources are identified by numeric IP addresses, but these IP addresses are difficult for network users to remember. The DNS database contains records that map user-friendly alphanumeric names for network resources to the IP address used by those resources for communication.

24. What are the services of transport layer ?

As layer four of the OSI model, the transport layer is responsible for providing communication services between computers on a network. 
For example, as the data packets transit between the originating or sending computer and the destination or receiving computer, the 
transport layer performs error checking and data packet routing services. Additionally, while working with the three lower and three 
upper layers, the transport layer continues to provide services, even though different application software processes are running 
simultaneously on multiple computers.

25.The Internet Transport Protocols: UDP ?
Ans:1. The Internet protocol suite supports a connectionless transport protocol, UDP (User Datagram Protocol). 
    2. UDP transmits segments consisting of an 8byte header followed by the payload.
    3. The source port is primarily needed when a reply must be sent back to the source. 
    4. By copying the source port field from the incoming segment into the destination port field of the outgoing segment, 
        the process sending the reply can specify which process on the sending machine is to get it. 
    5. The UDP length field includes the 8-byte header and the data. The UDP checksum is optional and stored as 0 if not 
        computed (a true computed 0 is stored as all 1s).
        
26.The Internet Transport Protocols: TCP ?
Ans:1. The IP layer gives no guarantee that datagrams will be delivered properly, so it is up to TCP to time out 
    and retransmit them as need be. 
    2. Datagrams that do arrive may well do so in the wrong order; it is also up to TCP to reassemble them into messages 
        in the proper sequence. 
        
        The TCP Service Model
        1. TCP service is obtained by both the sender and receiver creating end points, called sockets. 
        2. Each socket has a socket number (address) consisting of the IP address of the host and a 16-bit number local to that host, 
            called a port. A port is the TCP name for a TSAP (Transport Service Access Point)
        3. A socket may be used for multiple connections at the same time. ( i.e, two or more connections may terminate at the same 
            socket. ) 
        4. Connections are identified by the socket identifiers at both ends, that is, (socket1, socket2). 
        5. Port numbers below 1024 are called wellknown ports and are reserved for standard services.
        
         UNIX based architectures use inetd (Internet daemon) as a single daemon instead of running multiple daemons 
         and wasting the resources. 
         For example if there is a web server, mail server and ftp server running three daemons, each will 
         consume more resource. Assuming mail and ftp is lightly loaded it makes sense to execute three server 
         daemons when required. Inetd does this.All TCP connections are full duplex and point-topoint. Full duplex means 
         that traffic can go in both directions at the same time. 
         Point-to-point means that each connection has exactly two end points. 
         TCP does not support multicasting or broadcasting. A TCP connection is a byte stream, not a message stream. Message 
         boundaries are not preserved end to end.For example, if the sending process does four 512byte writes to a TCP stream, 
         these data may be delivered to the receiving process as four 512-byte chunks, two 1024-byte chunks, 
         one 2048-byte chunk or some other way. There is no way for the receiver to detect the hoe many chunks of data 
         was written by sender. When an application passes data to TCP, TCP may send it immediately or buffer it (in order to collect a 
         larger amount to send at once), at its discretion.However, sometimes, the application really wants the data to be sent immediately. 
         For example, suppose a user is logged into a remote machine. After a command line has been finished and the carriage return typed, 
         it is essential that the line be shipped off to the remote machine immediately and not buffered until the next line comes in. 
         To force data out, applications can use the PUSH flag, which tells TCP not to delay the transmission.
         When an application passes data to TCP, TCP may send it immediately or buffer it (in order to collect a larger amount to send 
         at once), at its discretion.However, sometimes, the application really wants the data to be sent immediately. 
         For example, suppose a user is logged into a remote machine. After a command line has been finished and the carriage return 
         typed, it is essential that the line be shipped off to the remote machine immediately and not buffered until the next line 
         comes in.To force data out, applications can use the PUSH flag, which tells TCP not to delay the transmission.
         When an interactive user hits the DEL or CTRL-C key to break off a remote computation that has already begun, the sending       
         application puts some control information in the data stream and gives it to TCP along with the URGENT flag.
         This event causes TCP to stop accumulating data and transmit everything it has for that connection immediately.

27.What are the TCP Congestion Control?
Ans:Two potential problems exist, which cause congestion: 
   1.Network capacity 
   2.Receiver capacity

    1.When a connection is established, the sender initializes the congestion window to the size of the 1 maximum segment (1MSS). 
        It then sends one maximum segment. 
    2.If this segment is acknowledged before the timer goes off, it doubles the congestion window and transmits double the number of MSS. 
    3.The congestion window keeps growing exponentially until either a timeout occurs or the receiver's window is reached. 
        This region of exponential rise is called as slow start. Once the limit of congestion window threshhold is reached the 
        algorithm enter the phase of linear growth. Now the congestion window is increased 1 MSS at a time. This continues to 
        increase linearly till the timeout occurs. Once the timeout occurs the congestion window threshold is halved, and the 
        system again begins in slow start phase.
        
28.TCP Timer Management?
Ans:Retransmission timer 
    When a segment is sent, a retransmission timer is started. 
    If the segment is acknowledged before the timer expires, the timer is stopped. 
    If, on the other hand, the timer goes off before the acknowledgement comes in, the segment is retransmitted (and the timer started 
    again). 
    For each connection, TCP maintains a variable, RTT, that is the best current estimate of the round-trip time to the destination 
    in question.
    When a segment is sent, a timer is started, both to see how long the acknowledgement takes and to trigger a retransmission 
    if it takes too long. 
    If the acknowledgement gets back before the timer expires, TCP measures how long the acknowledgement took, say, M. It then 
    updates RTT according to the formula

    A second timer is the persistence timer. 
    The receiver sends an acknowledgement with a window size of 0, telling the sender to wait. 
    Later, the receiver updates the window, but the packet with the update is lost.
    Now both the sender and the receiver are waiting for each other to do something. 
    When the persistence timer goes off, the sender transmits a probe to the receiver. 
    The response to the probe gives the window size. If it is still zero, the persistence timer is set again and the cycle repeats. 
    If it is nonzero, data can now be sent.

    A third timer is the keepalive timer. 
    When a connection has been idle for a long time, the keepalive timer may go off to cause one side to check whether the other 
    side is still there. 
    If it fails to respond, the connection is terminated.

    The last timer used on each TCP connection is the closing timer. 
    It runs for twice the maximum packet lifetime to make sure that when a connection is closed, all packets created by 
    it have died off.

29.Where and why would we use the TCP?
Ans:1.Its primary job is to get data from one location to another, regardless of the physical network and location.
    2.TCP offers an extremely reliable and robust method of transferring data, ensuring that the data being transferred does 
    not become corrupt in any way.
    3.Some common protocols that use TCP are: FTP, Telnet, HTTP, HTTPS, DNS, SMTP and POP3.
    
30.Main Features of TCP?
Ans:a.Reliable Transport
    b.Connection-Oriented
    c.Flow Control
    d.Windowing
    e.Acknowledgements
    f.More overhead
    
31.Why TCP is Reliable?
Ans:It's a reliable transport because of the different techniques it uses to ensure that the data received is error free.

32.What is Windowing?
Ans:Data throughput, or transfer efficiency, would be low if the transmitting machine had to wait for an acknowledgment after 
    sending each packet of data.
    Windowing controls how much information is transferred from one end to the other. While some protocols quantify 
    information by observing the number of packets, here TCP/IP protocol measures it by counting the number of bytes.



